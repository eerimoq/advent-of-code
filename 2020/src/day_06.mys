from os import TextFile

@generic(T)
def union(items: [{T}]) -> {T}:
    result = {}

    for item in items:
        result |= item

    return result

@generic(T)
def intersection(items: [{T}]) -> {T}:
    result = {}

    if len(items) > 0:
        result |= items[0]

        for item in slice(items, 1):
            result &= item

    return result

def load_answers() -> [[{char}]]:
    answers = []

    for group in TextFile(f"{__assets__}/day_06.txt").read().strip().split("\n\n"):
        group_answers: [{char}] = []

        for person_answers_string in group.split("\n"):
            person_answers: {char} = {}

            for answer in person_answers_string:
                person_answers.add(answer)

            group_answers.append(person_answers)

        answers.append(group_answers)

    return answers

def part_1(answers: [[{char}]]):
    count: u64 = 0

    for group_answers in answers:
        count += len(union[char](group_answers))

    print(count)

def part_2(answers: [[{char}]]):
    count: u64 = 0

    for group_answers in answers:
        count += len(intersection[char](group_answers))

    print(count)

def day_06():
    answers = load_answers()
    part_1(answers)
    part_2(answers)
