from os import TextFile

def load_ops(code: string) -> [Op]:
    ops: [Op] = []

    for line in code.strip().split("\n"):
        rm = line.match(re"^mask = (\w+)$")

        if rm is not None:
            ops.append(MaskOp(rm.group(1)))

        rm = line.match(re"^mem\[(\d+)\] = (\d+)$")

        if rm is not None:
            ops.append(MemOp(u64(rm.group(1)), u64(rm.group(2))))

    return ops

@trait
class Op:
    pass

class MaskOp(Op):
    set_mask: u64
    clear_mask: u64

    def __init__(self, mask: string):
        self.set_mask = 0
        self.clear_mask = 0

        for bit in mask:
            self.set_mask <<= 1
            self.clear_mask <<= 1

            match bit:
                case '1':
                    self.set_mask |= 1
                case '0':
                    self.clear_mask |= 1

        self.clear_mask ^= 0xffffffffffffffff

class MemOp(Op):
    address: u64
    value: u64

class Computer:
    memory: {u64: u64}
    set_mask: u64
    clear_mask: u64

    def __init__(self):
        self.memory = {}
        self.set_mask = 0
        self.clear_mask = 0

    def run(self, ops: [Op]) -> u64:
        for op in ops:
            match op:
                case MaskOp() as mask_op:
                    self.set_mask = mask_op.set_mask
                    self.clear_mask = mask_op.clear_mask
                case MemOp() as mem_op:
                    value = mem_op.value
                    value |= self.set_mask
                    value &= self.clear_mask
                    self.memory[mem_op.address] = value

        return sum(self.memory.values())

def part_1(ops: [Op]):
    computer = Computer()
    print(computer.run(ops))

def day_14():
    ops = load_ops(TextFile(f"{__assets__}/day_14.txt").read().strip())
    part_1(ops)

@test
def test_part_1():
    code = ("mask = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\n"
            "mem[8] = 11\n"
            "mem[7] = 101\n"
            "mem[8] = 0\n")
    ops = load_ops(code)
    computer = Computer()
    assert computer.run(ops) == 165
