from os import TextFile

class OpError(Error):
    message: string

class Op:
    name: string
    value: i64

def load_instructions(code: string) -> [Op]:
    instructions: [Op] = []

    for line in code.strip().split("\n"):
        name, _, value = line.partition(" ")
        instructions.append(Op(name, i64(value)))

    return instructions

def run(instructions: [Op]) -> (bool, i64):
    count = [0 for _ in range(i64(len(instructions)))]
    ok = False
    pc = 0
    acc = 0

    while True:
        if pc == i64(len(instructions)):
            ok = True
            break

        if count[pc] > 0:
            break

        count[pc] += 1
        op = instructions[pc]

        match op.name:
            case "nop":
                pc += 1
            case "acc":
                acc += op.value
                pc += 1
            case "jmp":
                pc += op.value
            case _:
                raise OpError(op.name)

    return (ok, acc)

def part_1(instructions: [Op]):
    print(run(instructions)[1])

def part_2(instructions: [Op]):
    for i in range(i64(len(instructions))):
        op = instructions[i]
        name = op.name

        match name:
            case "nop":
                op.name = "jmp"
            case "jmp":
                op.name = "nop"
            case _:
                continue

        ok, acc = run(instructions)

        if ok:
            print(acc)
            break

        op.name = name

def day_08():
    instructions = load_instructions(TextFile(f"{__assets__}/day_08.txt").read().strip())
    part_1(instructions)
    part_2(instructions)

@test
def test_part_1():
    code = ("nop +0\n"
            "acc +1\n"
            "jmp +4\n"
            "acc +3\n"
            "jmp -3\n"
            "acc -99\n"
            "acc +1\n"
            "jmp -4\n"
            "acc +6\n")
    instructions = load_instructions(code)
    assert run(instructions) == (False, 5)
