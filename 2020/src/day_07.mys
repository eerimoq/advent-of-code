from os.path import Path

func load_bags() -> {string: [(string, i64)]}:
    bags = {}

    for line in Path(f"{__assets__}/day_07.txt").read_text().strip().split("\n"):
        color, _, contains = line.partition(" bags contain ")
        bag: [(string, i64)] = []

        for contain in contains.split(","):
            mo = contain.strip().match(re"(\d+) (.*) bag")

            if mo is None:
                continue

            bag.append((mo.group(2), i64(mo.group(1))))

        bags[color] = bag

    return bags

class Part1:
    bags: {string: [(string, i64)]}

    func find_in_bag(self, contains: [(string, i64)]) -> bool:
        for color, _ in contains:
            if color == "shiny gold":
                return True
            else:
                if self.find_in_bag(self.bags[color]):
                    return True

        return False

    func process(self):
        count = 0

        for color, contains in self.bags:
            if self.find_in_bag(contains):
                count += 1

        print(count)

class Part2:
    bags: {string: [(string, i64)]}

    func count_bags_in_bag(self, contains: [(string, i64)]) -> i64:
        total_count = 0

        for color, count in contains:
            total_count += count
            total_count += count * self.count_bags_in_bag(self.bags[color])

        return total_count

    func process(self):
        print(self.count_bags_in_bag(self.bags["shiny gold"]))

func day_07():
    bags = load_bags()
    Part1(bags).process()
    Part2(bags).process()
