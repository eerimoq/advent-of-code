from os import TextFile
from string import StringBuilder

def load_rules_and_messages(text: string) -> ({string: string}, [string]):
    rules: {string: string} = {}
    messages: [string] = []

    for line in text.split("\n"):
        mo = line.match(re"^(\d+): \"(\w)\"$")

        if mo is not None:
            rules[mo.group(1)] = mo.group(2)
            continue

        mo = line.match(re"^(\d+): (.*)$")

        if mo is not None:
            rules[mo.group(1)] = mo.group(2)
            continue

        if line != "":
            messages.append(line)

    return rules, messages

def create_regex_recurse(builder: StringBuilder,
                         rule: string,
                         rules: {string: string}):
    builder += '('

    for value in rule.split(" "):
        if value.is_digit():
            create_regex_recurse(builder, rules[value], rules)
        else:
            builder += value

    builder += ')'

def create_regex(rules: {string: string}) -> regex:
    builder = StringBuilder()
    builder += '^'
    create_regex_recurse(builder, rules["0"], rules)
    builder += '$'

    return regex(builder.to_string(), "")

def part(rules: {string: string}, messages: [string]) -> i64:
    re = create_regex(rules)
    number_of_matching_messages = 0

    for message in messages:
        if message.match(re) is not None:
            number_of_matching_messages += 1

    return number_of_matching_messages

def part_1(rules: {string: string}, messages: [string]) -> i64:
    return part(rules, messages)

def part_2(rules: {string: string}, messages: [string]) -> i64:
    rules["8"] = "42 +"
    # Same number of 42:s and 31:s. Hardcoded limit of 4.
    rules["11"] = " | ".join([f"42 {{{i}}} 31 {{{i}}}" for i in range(1, 5)])

    return part(rules, messages)

def day_19():
    rules, messages = load_rules_and_messages(TextFile("src/day_19.txt").read().strip())
    print(part_1(rules, messages))
    print(part_2(rules, messages))

@test
def test_part_1():
    text = ("0: 4 1 5\n"
            "1: 2 3 | 3 2\n"
            "2: 4 4 | 5 5\n"
            "3: 4 5 | 5 4\n"
            "4: \"a\"\n"
            "5: \"b\"\n"
            "\n"
            "ababbb\n"
            "bababa\n"
            "abbbab\n"
            "aaabbb\n"
            "aaaabbb\n")
    rules, messages = load_rules_and_messages(text.strip())
    assert part_1(rules, messages) == 2

@test
def test_part_2():
    text = ("42: 9 14 | 10 1\n"
            "9: 14 27 | 1 26\n"
            "10: 23 14 | 28 1\n"
            "1: \"a\"\n"
            "11: 42 31\n"
            "5: 1 14 | 15 1\n"
            "19: 14 1 | 14 14\n"
            "12: 24 14 | 19 1\n"
            "16: 15 1 | 14 14\n"
            "31: 14 17 | 1 13\n"
            "6: 14 14 | 1 14\n"
            "2: 1 24 | 14 4\n"
            "0: 8 11\n"
            "13: 14 3 | 1 12\n"
            "15: 1 | 14\n"
            "17: 14 2 | 1 7\n"
            "23: 25 1 | 22 14\n"
            "28: 16 1\n"
            "4: 1 1\n"
            "20: 14 14 | 1 15\n"
            "3: 5 14 | 16 1\n"
            "27: 1 6 | 14 18\n"
            "14: \"b\"\n"
            "21: 14 1 | 1 14\n"
            "25: 1 1 | 1 14\n"
            "22: 14 14\n"
            "8: 42\n"
            "26: 14 22 | 1 20\n"
            "18: 15 15\n"
            "7: 14 5 | 1 21\n"
            "24: 14 1\n"
            "\n"
            "abbbbbabbbaaaababbaabbbbabababbbabbbbbbabaaaa\n"
            "bbabbbbaabaabba\n"
            "babbbbaabbbbbabbbbbbaabaaabaaa\n"
            "aaabbbbbbaaaabaababaabababbabaaabbababababaaa\n"
            "bbbbbbbaaaabbbbaaabbabaaa\n"
            "bbbababbbbaaaaaaaabbababaaababaabab\n"
            "ababaaaaaabaaab\n"
            "ababaaaaabbbaba\n"
            "baabbaaaabbaaaababbaababb\n"
            "abbbbabbbbaaaababbbbbbaaaababb\n"
            "aaaaabbaabaaaaababaa\n"
            "aaaabbaaaabbaaa\n"
            "aaaabbaabbaaaaaaabbbabbbaaabbaabaaa\n"
            "babaaabbbaaabaababbaabababaaab\n"
            "aabbbbbaabbbaaaaaabbbbbababaaaaabbaaabba\n")
    rules, messages = load_rules_and_messages(text.strip())
    assert part_1(rules, messages) == 3
    assert part_2(rules, messages) == 12
