from os.path import Path
from string import StringReader

func load_expressions() -> [string]:
    return [line.replace(" ", "")
            for line in Path(f"{__assets__}/day_18.txt").read_text().strip().split("\n")]

func evaluate_once(reader: StringReader, is_part_2: bool) -> i64:
    match reader.get():
        case '(':
            value = evaluate(reader, is_part_2)
        case _ as ch:
            value = i64(str(ch))

    return value

func evaluate(reader: StringReader, is_part_2: bool) -> i64:
    value = 0

    while True:
        match reader.get():
            case '':
                break
            case '(':
                value = evaluate(reader, is_part_2)
            case ')':
                break
            case '+':
                value += evaluate_once(reader, is_part_2)
            case '*':
                if is_part_2:
                    value *= evaluate(reader, is_part_2)
                    break
                else:
                    value *= evaluate_once(reader, is_part_2)
            case _ as ch:
                value = i64(str(ch))

    return value

func part(expressions: [string], is_part_2: bool):
    value = 0

    for expression in expressions:
        value += evaluate(StringReader(expression), is_part_2)

    print(value)

func part_1(expressions: [string]):
    part(expressions, False)

func part_2(expressions: [string]):
    part(expressions, True)

func day_18():
    expressions = load_expressions()
    part_1(expressions)
    part_2(expressions)

test part_1():
    datas = [
        ("2 * 3", 6),
        ("2 + 3", 5),
        ("2 + 3 * 2", 10),
        ("1 + (2 * 3) * 2", 14),
        ("2 * 3 + (4 * 5)", 26),
        ("5 + (8 * 3 + 9 + 3 * 4 * 3)", 437),
        ("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))", 12240),
        ("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2", 13632)
    ]

    for expression, result in datas:
        assert evaluate(StringReader(expression.replace(" ", "")), False) == result

test part_2():
    datas = [
        ("2 * 3", 6),
        ("2 + 3", 5),
        ("5 + 3 * 2", 16),
        ("1 + (2 * 3) + (4 * (5 + 6))", 51),
        ("2 * 3 + (4 * 5)", 46),
        ("5 + (8 * 3 + 9 + 3 * 4 * 3)", 1445),
        ("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))", 669060),
        ("((1 + 1) * (2 * 1 + 3) + 2) + 1", 21),
        ("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2", 23340)
    ]

    for expression, result in datas:
        assert evaluate(StringReader(expression.replace(" ", "")), True) == result
