from os import TextFile

class Command:
    action: string
    x_min: i64
    x_max: i64
    y_min: i64
    y_max: i64
    z_min: i64
    z_max: i64

def get_input(filename: string) -> [Command]:
    commands: [Command] = []

    for line in TextFile(f"{__assets__}/day_22/{filename}").read().strip().split("\n"):
        mo = line.match(re"(\w+) "
                        re"x=(-?\d+)\.\.(-?\d+),"
                        re"y=(-?\d+)\.\.(-?\d+),"
                        re"z=(-?\d+)\.\.(-?\d+)")

        if mo is not None:
            commands.append(Command(mo.group(1),
                                    i64(mo.group(2)),
                                    i64(mo.group(3)),
                                    i64(mo.group(4)),
                                    i64(mo.group(5)),
                                    i64(mo.group(6)),
                                    i64(mo.group(7))))

    return commands

def part_1(filename: string) -> i64:
    commands = get_input(filename)
    grid: [[[bool]]] = []
    dimension = 101
    offset = dimension / 2

    for _ in range(dimension):
        y: [[bool]] = []

        for _ in range(dimension):
            y.append([False for _ in range(dimension)])

        grid.append(y)

    for command in commands:
        for x in range(max(command.x_min, -50), min(command.x_max, 50) + 1):
            for y in range(max(command.y_min, -50), min(command.y_max, 50) + 1):
                for z in range(max(command.z_min, -50), min(command.z_max, 50) + 1):
                    grid[x + offset][y + offset][z + offset] = (command.action == "on")

    count = 0

    for x in range(dimension):
        for y in range(dimension):
            for z in range(dimension):
                if grid[x][y][z]:
                    count += 1

    return count

def clone(command: Command) -> Command:
    return Command(command.action,
                   command.x_min,
                   command.x_max,
                   command.y_min,
                   command.y_max,
                   command.z_min,
                   command.z_max)

def clone_x(command: Command, x_min: i64, x_max: i64) -> Command:
    command = clone(command)
    command.x_min = x_min
    command.x_max = x_max

    return command

def clone_y(command: Command, y_min: i64, y_max: i64) -> Command:
    command = clone(command)
    command.y_min = y_min
    command.y_max = y_max

    return command

def clone_z(command: Command, z_min: i64, z_max: i64) -> Command:
    command = clone(command)
    command.z_min = z_min
    command.z_max = z_max

    return command

def are_not_overlapping(cube_1: Command, cube_2: Command) -> bool:
    return (cube_1.x_max < cube_2.x_min
            or cube_1.x_min > cube_2.x_max
            or cube_1.y_max < cube_2.y_min
            or cube_1.y_min > cube_2.y_max
            or cube_1.z_max < cube_2.z_min
            or cube_1.z_min > cube_2.z_max)

def covers(cover: Command, part: Command) -> bool:
    return (part.x_min >= cover.x_min and part.x_max <= cover.x_max
            and part.y_min >= cover.y_min and part.y_max <= cover.y_max
            and part.z_min >= cover.z_min and part.z_max <= cover.z_max)

def split_x(sub_cube: Command, cube: Command) -> [Command]:
    sub_cubes: [Command] = []

    if sub_cube.x_min < cube.x_min and sub_cube.x_max > cube.x_max:
        sub_cubes.append(clone_x(sub_cube, sub_cube.x_min, cube.x_min - 1))
        sub_cubes.append(clone_x(sub_cube, cube.x_min, cube.x_max))
        sub_cubes.append(clone_x(sub_cube, cube.x_max + 1, sub_cube.x_max))
    elif sub_cube.x_min < cube.x_min:
        sub_cubes.append(clone_x(sub_cube, sub_cube.x_min, cube.x_min - 1))
        sub_cubes.append(clone_x(sub_cube, cube.x_min, sub_cube.x_max))
    elif sub_cube.x_max > cube.x_max:
        sub_cubes.append(clone_x(sub_cube, sub_cube.x_min, cube.x_max))
        sub_cubes.append(clone_x(sub_cube, cube.x_max + 1, sub_cube.x_max))
    else:
        sub_cubes.append(sub_cube)

    return sub_cubes

def split_y(sub_cubes: [Command], cube: Command) -> [Command]:
    new_sub_cubes: [Command] = []

    for sub_cube in sub_cubes:
        if sub_cube.y_min < cube.y_min and sub_cube.y_max > cube.y_max:
            new_sub_cubes.append(clone_y(sub_cube, sub_cube.y_min, cube.y_min - 1))
            new_sub_cubes.append(clone_y(sub_cube, cube.y_min, cube.y_max))
            new_sub_cubes.append(clone_y(sub_cube, cube.y_max + 1, sub_cube.y_max))
        elif sub_cube.y_min < cube.y_min:
            new_sub_cubes.append(clone_y(sub_cube, sub_cube.y_min, cube.y_min - 1))
            new_sub_cubes.append(clone_y(sub_cube, cube.y_min, sub_cube.y_max))
        elif sub_cube.y_max > cube.y_max:
            new_sub_cubes.append(clone_y(sub_cube, sub_cube.y_min, cube.y_max))
            new_sub_cubes.append(clone_y(sub_cube, cube.y_max + 1, sub_cube.y_max))
        else:
            new_sub_cubes.append(sub_cube)

    return new_sub_cubes

def split_z(sub_cubes: [Command], cube: Command) -> [Command]:
    new_sub_cubes: [Command] = []

    for sub_cube in sub_cubes:
        if sub_cube.z_min < cube.z_min and sub_cube.z_max > cube.z_max:
            new_sub_cubes.append(clone_z(sub_cube, sub_cube.z_min, cube.z_min - 1))
            new_sub_cubes.append(clone_z(sub_cube, cube.z_min, cube.z_max))
            new_sub_cubes.append(clone_z(sub_cube, cube.z_max + 1, sub_cube.z_max))
        elif sub_cube.z_min < cube.z_min:
            new_sub_cubes.append(clone_z(sub_cube, sub_cube.z_min, cube.z_min - 1))
            new_sub_cubes.append(clone_z(sub_cube, cube.z_min, sub_cube.z_max))
        elif sub_cube.z_max > cube.z_max:
            new_sub_cubes.append(clone_z(sub_cube, sub_cube.z_min, cube.z_max))
            new_sub_cubes.append(clone_z(sub_cube, cube.z_max + 1, sub_cube.z_max))
        else:
            new_sub_cubes.append(sub_cube)

    return new_sub_cubes

def split(sub_cubes: [Command], cube: Command) -> [Command]:
    new_sub_cubes: [Command] = []

    for sub_cube in sub_cubes:
        if are_not_overlapping(sub_cube, cube):
            new_sub_cubes.append(sub_cube)
        else:
            parts = split_x(sub_cube, cube)
            parts = split_y(parts, cube)
            parts = split_z(parts, cube)
            parts = [part for part in parts if not covers(cube, part)]
            new_sub_cubes.extend(parts)

    return new_sub_cubes

def part_2(filename: string) -> i64:
    commands = get_input(filename)
    cubes: [Command] = []

    for command in commands:
        if command.action == "on":
            sub_cubes = [command]

            for cube in cubes:
                sub_cubes = split(sub_cubes, cube)

            cubes.extend(sub_cubes)
        else:
            new_cubes: [Command] = []

            for cube in cubes:
                new_cubes.extend(split([cube], command))

            cubes = new_cubes

    count = 0

    for cube in cubes:
        count += ((cube.x_max - cube.x_min + 1)
                  * (cube.y_max - cube.y_min + 1)
                  * (cube.z_max - cube.z_min + 1))

    return count

def day_22():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

@test
def test_all():
    assert part_1("example.txt") == 39
    assert part_1("input.txt") == 580012
    assert part_2("example.txt") == 39
    assert part_2("example_2.txt") == 2758514936282235
