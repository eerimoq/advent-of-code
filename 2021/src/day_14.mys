from os import TextFile

def get_input(filename: string) -> ([char], {char: {char: char}}):

    lines = TextFile(f"{__assets__}/day_14/{filename}").read().strip().split("\n")
    polymer: [char] = []

    for ch in lines[0]:
        polymer.append(ch)

    insert: {char: {char: char}} = {}

    for line in slice(lines, 2, i64(len(lines))):
        insert.get(line[0], {}, True)[line[1]] = line[6]

    return (polymer, insert)

def increment(counts: {char: i64}, ch: char, count: i64):
    if ch not in counts:
        counts[ch] = 0

    counts[ch] += count

def count_steps(pairs: {char: {char: i64}},
                steps: i64,
                insert: {char: {char: char}},
                counts: {char: i64}):
    for _ in range(steps):
        next_pairs: {char: {char: i64}} = {}

        for left, value in pairs:
            for right, count in value:
                ch = insert[left][right]
                increment(counts, ch, count)
                next_pairs_inner = next_pairs.get(left, {}, True)

                if ch not in next_pairs_inner:
                    next_pairs_inner[ch] = 0

                next_pairs_inner[ch] += count
                next_pairs_inner = next_pairs.get(ch, {}, True)

                if right not in next_pairs_inner:
                    next_pairs_inner[right] = 0

                next_pairs_inner[right] += count

        pairs = next_pairs

def both_parts(filename: string, steps: i64) -> i64:
    polymer, insert = get_input(filename)
    pairs: {char: {char: i64}} = {}
    counts: {char: i64} = {}

    for i in range(i64(len(polymer) - 1)):
        pairs_inner = pairs.get(polymer[i], {}, True)

        if polymer[i + 1] not in pairs_inner:
            pairs_inner[polymer[i + 1]] = 0

        pairs_inner[polymer[i + 1]] += 1

    for ch in polymer:
        increment(counts, ch, 1)

    count_steps(pairs, steps, insert, counts)

    return max(counts.values()) - min(counts.values())

def part_1(filename: string) -> i64:
    return both_parts(filename, 10)

def part_2(filename: string) -> i64:
    return both_parts(filename, 40)

def day_14():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

@test
def test_all():
    assert part_1("example.txt") == 1588
    assert part_2("example.txt") == 2188189693529
    assert part_1("input.txt") == 3095
    assert part_2("input.txt") == 3152788426516
