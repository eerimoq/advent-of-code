from os import TextFile

class Point:
    x: i64
    y: i64
    z: i64

    def __add__(self, other: Point) -> Point:
        return Point(self.x + other.x, self.y + other.y, self.z + other.z)

    def __sub__(self, other: Point) -> Point:
        return Point(self.x - other.x, self.y - other.y, self.z - other.z)

class Scanner:
    beacons: [Point]
    position: Point

def get_input(filename: string) -> [Scanner]:
    scanners: [Scanner] = []

    for chunk in TextFile(f"{__assets__}/day_19/{filename}").read().strip().split("\n\n"):
        scanner = Scanner([], Point(0, 0, 0))
        scanners.append(scanner)

        for line in slice(chunk.split('\n'), 1):
            parts = line.split(',')
            scanner.beacons.append(Point(i64(parts[0]), i64(parts[1]), i64(parts[2])))

    return scanners

ROTATIONS: [(i64, i64, i64)] = [
    # x front (x)
    (1, 2, 3),
    (1, 3, -2),
    (1, -2, -3),
    (1, -3, 2),

    # x up (z)
    (3, 2, -1),
    (3, -1, -2),
    (3, -2, 1),
    (3, 1, 2),

    # x back (-x)
    (-1, 2, -3),
    (-1, -3, -2),
    (-1, -2, 3),
    (-1, 3, 2),

    # x down (-z)
    (-3, 2, 1),
    (-3, 1, -2),
    (-3, -2, -1),
    (-3, -1, 2),

    # x left (y)
    (2, -1, 3),
    (2, 3, 1),
    (2, 1, -3),
    (2, -3, -1),

    # x right (-y)
    (-2, 1, 3),
    (-2, 3, -1),
    (-2, -1, -3),
    (-2, -3, 1)
]

def match_scanners(scanner_1: Scanner, scanner_2: Scanner) -> Scanner:
    for b1 in scanner_1.beacons:
        for b2 in scanner_2.beacons:
            scanner_2_position = b1 - b2
            beacons = [
                beacon + scanner_2_position
                for beacon in scanner_2.beacons
            ]
            number_of_matches = 0

            for b3 in scanner_1.beacons:
                for b4 in beacons:
                    if b3 == b4:
                        number_of_matches += 1

                        if number_of_matches >= 12:
                            return Scanner(beacons, scanner_2_position)

    return None

def find_beacons(known_scanners: [Scanner], scanner: Scanner) -> Scanner:
    for known_scanner in known_scanners:
        for rx, ry, rz in ROTATIONS:
            rotated_scanner = Scanner([], None)

            for beacon in scanner.beacons:
                xyz = [beacon.x, beacon.y, beacon.z]

                if rx > 0:
                    x = xyz[rx - 1]
                else:
                    x = -xyz[-rx - 1]

                if ry > 0:
                    y = xyz[ry - 1]
                else:
                    y = -xyz[-ry - 1]

                if rz > 0:
                    z = xyz[rz - 1]
                else:
                    z = -xyz[-rz - 1]

                rotated_scanner.beacons.append(Point(x, y, z))

            rotated_scanner = match_scanners(known_scanner, rotated_scanner)

            if rotated_scanner is not None:
                return rotated_scanner

    return None

def part_1(filename: string) -> i64:
    scanners = get_input(filename)
    beacons = {beacon for beacon in scanners[0].beacons}
    known_scanners = [scanners.pop(0)]

    while len(scanners) > 0:
        for index, scanner in enumerate(scanners):
            scanner = find_beacons(known_scanners, scanner)

            if scanner is not None:
                scanners.pop(index)
                known_scanners.append(scanner)

                for beacon in scanner.beacons:
                    beacons.add(beacon)

                break

    return i64(len(beacons))

def part_2(filename: string) -> i64:
    scanners = get_input(filename)
    known_scanners = [scanners.pop(0)]

    while len(scanners) > 0:
        for index, scanner in enumerate(scanners):
            scanner = find_beacons(known_scanners, scanner)

            if scanner is not None:
                scanners.pop(index)
                known_scanners.append(scanner)
                break

    maximum_distance = 0

    for scanner_1 in known_scanners:
        for scanner_2 in known_scanners:
            distance = scanner_1.position - scanner_2.position
            maximum_distance = max(maximum_distance,
                                   abs(distance.x) + abs(distance.y) + abs(distance.z))

    return maximum_distance

def day_19():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

@test
def test_all():
    assert part_1("example.txt") == 79
    assert part_2("example.txt") == 3621
