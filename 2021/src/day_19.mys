from os import TextFile

def get_input(filename: string) -> [Scanner]:
    scanners: [Scanner] = []
    scanner: Scanner = None

    for line in TextFile(f"{__assets__}/day_19/{filename}").read().strip().split("\n"):
        rm = line.match(re"--- scanner \d+ ---")

        if rm is not None:
            scanner = Scanner([], (0, 0, 0))
            scanners.append(scanner)

        rm = line.match(re"([-\d]+),([-\d]+),([-\d]+)")

        if rm is not None:
            scanner.beacons.append((i64(rm.group(1)),
                                    i64(rm.group(2)),
                                    i64(rm.group(3))))

    return scanners

class Scanner:
    beacons: [(i64, i64, i64)]
    position: (i64, i64, i64)

ROTATIONS: [(i64, i64, i64)] = [
    # x front (x)
    (1, 2, 3),
    (1, 3, -2),
    (1, -2, -3),
    (1, -3, 2),

    # x up (z)
    (3, 2, -1),
    (3, -1, -2),
    (3, -2, 1),
    (3, 1, 2),

    # x back (-x)
    (-1, 2, -3),
    (-1, -3, -2),
    (-1, -2, 3),
    (-1, 3, 2),

    # x down (-z)
    (-3, 2, 1),
    (-3, 1, -2),
    (-3, -2, -1),
    (-3, -1, 2),

    # x left (y)
    (2, -1, 3),
    (2, 3, 1),
    (2, 1, -3),
    (2, -3, -1),

    # x right (-y)
    (-2, 1, 3),
    (-2, 3, -1),
    (-2, -1, -3),
    (-2, -3, 1)
]

def match_scanners(scanner_1: Scanner, scanner_2: Scanner) -> Scanner:
    for bx1, by1, bz1 in scanner_1.beacons:
        for bx2, by2, bz2 in scanner_2.beacons:
            scanner_2_x = bx1 - bx2
            scanner_2_y = by1 - by2
            scanner_2_z = bz1 - bz2
            beacons = [
                (x + scanner_2_x, y + scanner_2_y, z + scanner_2_z)
                for x, y, z in scanner_2.beacons
            ]
            number_of_matches = 0

            for b1 in scanner_1.beacons:
                for b2 in beacons:
                    if b1 == b2:
                        number_of_matches += 1

                        if number_of_matches >= 12:
                            return Scanner(beacons,
                                           (scanner_2_x, scanner_2_y, scanner_2_z))

    return None

def find_beacons(known_scanners: [Scanner], scanner: Scanner) -> Scanner:
    for known_scanner in known_scanners:
        for rx, ry, rz in ROTATIONS:
            rotated_scanner = Scanner([], None)

            for x, y, z in scanner.beacons:
                xyz = [x, y, z]

                if rx > 0:
                    x = xyz[rx - 1]
                else:
                    x = -xyz[-rx - 1]

                if ry > 0:
                    y = xyz[ry - 1]
                else:
                    y = -xyz[-ry - 1]

                if rz > 0:
                    z = xyz[rz - 1]
                else:
                    z = -xyz[-rz - 1]

                rotated_scanner.beacons.append((x, y, z))

            rotated_scanner = match_scanners(known_scanner, rotated_scanner)

            if rotated_scanner is not None:
                return rotated_scanner

    return None

def part_1(filename: string) -> i64:
    scanners = get_input(filename)
    beacons = [beacon for beacon in scanners[0].beacons]
    known_scanners = [scanners.pop(0)]

    while len(scanners) > 0:
        for index, scanner in enumerate(scanners):
            scanner = find_beacons(known_scanners, scanner)

            if scanner is not None:
                scanners.pop(index)
                known_scanners.append(scanner)

                for beacon in scanner.beacons:
                    if beacon not in beacons:
                        beacons.append(beacon)

                break

    return i64(len(beacons))

def part_2(filename: string) -> i64:
    scanners = get_input(filename)
    known_scanners = [scanners.pop(0)]

    while len(scanners) > 0:
        for index, scanner in enumerate(scanners):
            scanner = find_beacons(known_scanners, scanner)

            if scanner is not None:
                scanners.pop(index)
                known_scanners.append(scanner)
                break

    maximum_distance = 0

    for scanner_1 in known_scanners:
        for scanner_2 in known_scanners:
            x1, y1, z1 = scanner_1.position
            x2, y2, z2 = scanner_2.position
            maximum_distance = max(maximum_distance,
                                   abs(x1 - x2) + abs(z1 - z2) + abs(y1 - y2))

    return maximum_distance

def day_19():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

@test
def test_all():
    assert part_1("example.txt") == 79
    assert part_2("example.txt") == 3621
