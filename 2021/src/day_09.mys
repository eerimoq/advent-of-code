from os import TextFile

def get_input(filename: string) -> [[i64]]:
    items: [[i64]] = []

    for value in TextFile(f"{__assets__}/day_09/{filename}").read().split("\n"):
        if value == "":
            continue

        digits: [i64] = []

        for ch in value:
            digits.append(i64(string(ch)))

        items.append(digits)

    return items

def find_low_points(items: [[i64]]) -> [(i64, i64)]:
    low_points: [(i64, i64)] = []

    for y in range(i64(len(items))):
        for x in range(i64(len(items[0]))):
            if is_low_point(x, y, items):
                low_points.append((x, y))

    return low_points

def is_low_point(x: i64, y: i64, items: [[i64]]) -> bool:
    num = items[y][x]
    up = 9
    down = 9
    left = 9
    right = 9

    if y > 0:
        up = items[y - 1][x]

    if y < i64(len(items)) - 1:
        down = items[y + 1][x]

    if x > 0:
        left = items[y][x - 1]

    if x < i64(len(items[0])) - 1:
        right = items[y][x + 1]

    return num < up and num < down and num < left and num < right

def part_1(filename: string) -> i64:
    items = get_input(filename)

    return sum([items[y][x] + 1 for x, y in find_low_points(items)])

def is_low_point_2(x: i64, y: i64, items: [[i64]]) -> bool:
    num = items[y][x]

    if num == 9:
        return False

    up = 9
    down = 9
    left = 9
    right = 9

    if y > 0:
        up = items[y - 1][x]

    if y < i64(len(items)) - 1:
        down = items[y + 1][x]

    if x > 0:
        left = items[y][x - 1]

    if x < i64(len(items[0])) - 1:
        right = items[y][x + 1]

    return num <= up and num <= down and num <= left and num <= right

def calc_size(x: i64, y: i64, items: [[i64]]) -> i64:
    items[y][x] = 9
    size = 1

    if x > 0 and is_low_point_2(x - 1, y, items):
        size += calc_size(x - 1, y, items)

    if x < i64(len(items[0])) - 1 and is_low_point_2(x + 1, y, items):
        size += calc_size(x + 1, y, items)

    if y > 0 and is_low_point_2(x, y - 1, items):
        size += calc_size(x, y - 1, items)

    if y < i64(len(items)) - 1 and is_low_point_2(x, y + 1, items):
        size += calc_size(x, y + 1, items)

    return size

def part_2(filename: string) -> i64:
    items = get_input(filename)
    low_points = find_low_points(items)

    for y in range(i64(len(items))):
        for x in range(i64(len(items[0]))):
            if is_low_point(x, y, items):
                low_points.append((x, y))

    basin_sizes: [i64] = []

    for x, y in low_points:
        basin_sizes.append(calc_size(x, y, items))

    basin_sizes.sort()

    return basin_sizes[-1] * basin_sizes[-2] * basin_sizes[-3]

def day_09():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

@test
def test_all():
    assert part_1("example.txt") == 15
    assert part_2("example.txt") == 1134
    assert part_1("input.txt") == 541
    assert part_2("input.txt") == 847504
