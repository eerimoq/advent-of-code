from os.path import Path

func get_input(filename: string) -> [[i64]]:
    items = []

    for line in Path(f"{__assets__}/day_09/{filename}").read_text().strip().split("\n"):
        items.append([i64(string(ch)) for ch in line])

    return items

class Matrix:
    data: [[i64]]
    height: i64
    width: i64

    func __init__(self, data: [[i64]]):
        self.data = data
        self.height = data.length()
        self.width = data[0].length()

    func get(self, r: i64, c: i64) -> i64:
        return self.data[r][c]

    func set(self, r: i64, c: i64, v: i64):
        self.data[r][c] = v

    func neighbours(self, r: i64, c: i64) -> [(i64, i64)]:
        neighbours = []

        if c > 0:
            neighbours.append((r, c - 1))

        if c < self.width - 1:
            neighbours.append((r, c + 1))

        if r > 0:
            neighbours.append((r - 1, c))

        if r < self.height - 1:
            neighbours.append((r + 1, c))

        return neighbours

func find_low_points(m: Matrix) -> [(i64, i64, i64)]:
    low_points: [(i64, i64, i64)] = []

    for r in range(m.height):
        for c in range(m.width):
            low = True

            for nr, nc in m.neighbours(r, c):
                if m.get(nr, nc) <= m.get(r, c):
                    low = False

            if low:
                low_points.append((r, c, m.get(r, c)))

    return low_points

func calc_basin_size(r: i64, c: i64, m: Matrix) -> i64:
    size = 1
    m.set(r, c, 9)

    for nr, nc in m.neighbours(r, c):
        if m.get(nr, nc) != 9:
            size += calc_basin_size(nr, nc, m)

    return size

func part_1(filename: string) -> i64:
    m = Matrix(get_input(filename))

    return sum([v + 1 for _, _, v in find_low_points(m)])

func part_2(filename: string) -> i64:
    m = Matrix(get_input(filename))
    sizes = [calc_basin_size(r, c, m) for r, c, _ in find_low_points(m)]
    sizes.sort()

    return sizes[-3] * sizes[-2] * sizes[-1]

func day_09():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

test all():
    assert part_1("example.txt") == 15
    assert part_2("example.txt") == 1134
    assert part_1("input.txt") == 541
    assert part_2("input.txt") == 847504
