from os import TextFile

def create_empty_diagram(lines: [((i64, i64), (i64, i64))]) -> [[i64]]:
    x_max = 0
    y_max = 0

    for p0, p1 in lines:
        x0, y0 = p0
        x1, y1 = p1

        x_max = max(x_max, x0)
        x_max = max(x_max, x1)
        y_max = max(y_max, y0)
        y_max = max(y_max, y1)

    diagram: [[i64]] = []

    for _ in range(y_max + 1):
        diagram.append([0 for _ in range(x_max + 1)])

    return diagram

def draw_line(diagram: [[i64]], p0: (i64, i64), p1: (i64, i64)):
    x0, y0 = p0
    x1, y1 = p1

    if x0 < x1:
        x_diff = 1
    elif x1 < x0:
        x_diff = -1
    else:
        x_diff = 0

    if y0 < y1:
        y_diff = 1
    elif y1 < y0:
        y_diff = -1
    else:
        y_diff = 0

    while x0 != x1 or y0 != y1:
        diagram[y0][x0] += 1
        x0 += x_diff
        y0 += y_diff

    diagram[y0][x0] += 1

def count_number_of_overlapping_lines(diagram: [[i64]]) -> i64:
    number_of_overlapping_lines = 0

    for line in diagram:
        for value in line:
            if value > 1:
                number_of_overlapping_lines += 1

    return number_of_overlapping_lines

def is_horizontal_or_vertical_line(p0: (i64, i64), p1: (i64, i64)) -> bool:
    return p0[0] == p1[0] or p0[1] == p1[1]

def part_1(lines: [((i64, i64), (i64, i64))]) -> i64:
    diagram = create_empty_diagram(lines)

    for p0, p1 in lines:
        if is_horizontal_or_vertical_line(p0, p1):
            draw_line(diagram, p0, p1)

    return count_number_of_overlapping_lines(diagram)

def part_2(lines: [((i64, i64), (i64, i64))]) -> i64:
    diagram = create_empty_diagram(lines)

    for p0, p1 in lines:
        draw_line(diagram, p0, p1)

    return count_number_of_overlapping_lines(diagram)

def day_05():
    lines: [((i64, i64), (i64, i64))] = []

    for line in TextFile(f"{__assets__}/day_05.txt").read().strip().split("\n"):
        mo = line.match(re"(\d+),(\d+) -> (\d+),(\d+)")

        if mo is None:
            continue

        lines.append(((i64(mo.group(1)), i64(mo.group(2))),
                      (i64(mo.group(3)), i64(mo.group(4)))))

    print(part_1(lines))
    print(part_2(lines))

@test
def test_all():
    lines = [
        ((0, 9), (5, 9)),
        ((8, 0), (0, 8)),
        ((9, 4), (3, 4)),
        ((2, 2), (2, 1)),
        ((7, 0), (7, 4)),
        ((6, 4), (2, 0)),
        ((0, 9), (2, 9)),
        ((3, 4), (1, 4)),
        ((0, 0), (8, 8)),
        ((5, 5), (8, 2))
    ]
    assert part_1(lines) == 5
    assert part_2(lines) == 12
