from os import TextFile

@trait
class Code:

    def run(self, w: i64, z: i64) -> i64:
        pass

class Code1(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 1
        x += 12
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 1
        y *= x
        z += y

        return z

class Code2(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 1
        x += 12
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 1
        y *= x
        z += y

        return z

class Code3(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 1
        x += 15
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 16
        y *= x
        z += y

        return z

class Code4(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 26
        x += -8
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 5
        y *= x
        z += y

        return z

class Code5(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 26
        x += -4
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 9
        y *= x
        z += y

        return z

class Code6(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 1
        x += 15
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 3
        y *= x
        z += y

        return z

class Code7(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 1
        x += 14
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 2
        y *= x
        z += y

        return z

class Code8(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 1
        x += 14
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 15
        y *= x
        z += y

        return z

class Code9(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 26
        x += -13
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 5
        y *= x
        z += y

        return z

class Code10(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 26
        x += -3
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 11
        y *= x
        z += y

        return z

class Code11(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 26
        x += -7
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 7
        y *= x
        z += y

        return z

class Code12(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 1
        x += 10
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 1
        y *= x
        z += y

        return z

class Code13(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 26
        x += -6
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 10
        y *= x
        z += y

        return z

class Code14(Code):

    def run(self, w: i64, z: i64) -> i64:
        x = 0
        y = 0

        x *= 0
        x += z
        x %= 26
        z /= 26
        x += -8
        x = 1 if w == x else 0
        x = 1 if 0 == x else 0
        y *= 0
        y += 25
        y *= x
        y += 1
        z *= y
        y *= 0
        y += w
        y += 3
        y *= x
        z += y

        return z

CODES: [Code] = [
    Code1(),
    Code2(),
    Code3(),
    Code4(),
    Code5(),
    Code6(),
    Code7(),
    Code8(),
    Code9(),
    Code10(),
    Code11(),
    Code12(),
    Code13(),
    Code14()
]

@trait
class Algoritm:

    def compare(self, model_number_1: i64, model_number_2: i64) -> i64:
        pass

    def result(self, model_numbers: [i64]) -> i64:
        pass

class Minimum(Algoritm):

    def compare(self, model_number_1: i64, model_number_2: i64) -> i64:
        return min(model_number_1, model_number_2)

    def result(self, model_numbers: [i64]) -> i64:
        return min(model_numbers)

class Maximum(Algoritm):

    def compare(self, model_number_1: i64, model_number_2: i64) -> i64:
        return max(model_number_1, model_number_2)

    def result(self, model_numbers: [i64]) -> i64:
        return max(model_numbers)

def both_parts(algoritm: Algoritm) -> i64:
    states_in = {0: 0}
    states_out: {i64: i64} = {}

    for code in CODES:
        for digit in range(1, 10):
            for z, model_number in states_in:
                z = code.run(digit, z)
                model_number = model_number * 10 + digit
                states_out[z] = algoritm.compare(model_number,
                                                 states_out.get(z, model_number))

        states_in = states_out
        states_out = {}

    return algoritm.result([model_number for z, model_number in states_in if z == 0])

def part_1() -> i64:
    return both_parts(Maximum())

def part_2() -> i64:
    return both_parts(Minimum())

def day_24():
    print(part_1())
    print(part_2())
