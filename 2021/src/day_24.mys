from os import TextFile

def get_input(filename: string) -> [[(string, string, string)]]:
    instruction_groups: [[(string, string, string)]] = []
    instructions: [(string, string, string)] = None

    for line in TextFile(f"{__assets__}/day_24/{filename}").read().strip().split("\n"):
        parts = line.split(' ')

        if len(parts) == 2:
            instruction = (parts[0], parts[1], "")
        else:
            instruction = (parts[0], parts[1], parts[2])

        if instruction[0] == "inp":
            if instructions is not None:
                instruction_groups.append(instructions)

            instructions = []

        instructions.append(instruction)

    instruction_groups.append(instructions)

    return instruction_groups

def run(z: i64,
        instructions: [(string, string, string)],
        model_number_digit: i64) -> i64:
    w = 0
    x = 0
    y = 0

    for op, v1, v2 in instructions:
        match op:
            case "inp":
                w = model_number_digit
            case "add":
                match v2:
                    case "w":
                        b = w
                    case "x":
                        b = x
                    case "y":
                        b = y
                    case "z":
                        b = z
                    case _:
                        b = i64(v2)

                match v1:
                    case "w":
                        w += b
                    case "x":
                        x += b
                    case "y":
                        y += b
                    case "z":
                        z += b
            case "mul":
                match v2:
                    case "w":
                        b = w
                    case "x":
                        b = x
                    case "y":
                        b = y
                    case "z":
                        b = z
                    case _:
                        b = i64(v2)

                match v1:
                    case "w":
                        w *= b
                    case "x":
                        x *= b
                    case "y":
                        y *= b
                    case "z":
                        z *= b
            case "div":
                match v2:
                    case "w":
                        b = w
                    case "x":
                        b = x
                    case "y":
                        b = y
                    case "z":
                        b = z
                    case _:
                        b = i64(v2)

                match v1:
                    case "w":
                        w /= b
                    case "x":
                        x /= b
                    case "y":
                        y /= b
                    case "z":
                        z /= b
            case "mod":
                match v2:
                    case "w":
                        b = w
                    case "x":
                        b = x
                    case "y":
                        b = y
                    case "z":
                        b = z
                    case _:
                        b = i64(v2)

                match v1:
                    case "w":
                        w %= b
                    case "x":
                        x %= b
                    case "y":
                        y %= b
                    case "z":
                        z %= b
            case "eql":
                match v2:
                    case "w":
                        b = w
                    case "x":
                        b = x
                    case "y":
                        b = y
                    case "z":
                        b = z
                    case _:
                        b = i64(v2)

                match v1:
                    case "w":
                        if w == b:
                            w = 1
                        else:
                            w = 0
                    case "x":
                        if x == b:
                            x = 1
                        else:
                            x = 0
                    case "y":
                        if y == b:
                            y = 1
                        else:
                            y = 0
                    case "z":
                        if z == b:
                            z = 1
                        else:
                            z = 0
            case _:
                raise NotImplementedError("Bad instruction.")

    return z

def part_1(filename: string) -> i64:
    instruction_groups = get_input(filename)
    states_in = {0: 0}
    states_out: {i64: i64} = {}

    for instruction_group in instruction_groups:
        for digit in range(1, 10):
            for z, model_number in states_in:
                z = run(z, instruction_group, digit)
                model_number = model_number * 10 + digit
                states_out[z] = max(model_number, states_out.get(z, model_number))

        states_in = states_out
        states_out = {}

    return max([model_number for z, model_number in states_in if z == 0])

def part_2(filename: string) -> i64:
    instruction_groups = get_input(filename)
    states_in = {0: 0}
    states_out: {i64: i64} = {}

    for instruction_group in instruction_groups:
        for digit in range(1, 10):
            for z, model_number in states_in:
                z = run(z, instruction_group, digit)
                model_number = model_number * 10 + digit
                states_out[z] = min(model_number, states_out.get(z, model_number))

        states_in = states_out
        states_out = {}

    return min([model_number for z, model_number in states_in if z == 0])

def day_24():
    print(part_1("input.txt"))
    print(part_2("input.txt"))
