from os.path import Path

func get_input(filename: string) -> [string]:
    return Path(f"{__assets__}/day_03/{filename}").read_text().strip().split("\n")

func count_ones_and_zeros_at_index(report: [string], index: i64) -> (i64, i64):
    number_of_ones = 0
    number_of_zeros = 0

    for value in report:
        if value[index] == '1':
            number_of_ones += 1
        else:
            number_of_zeros += 1

    return number_of_ones, number_of_zeros

func part_1(filename: string) -> i64:
    report = get_input(filename)
    gamma_rate = 0
    epsilon_rate = 0

    for index in range(report[0].length()):
        number_of_ones, number_of_zeros = count_ones_and_zeros_at_index(report,
                                                                        index)
        gamma_rate <<= 1
        epsilon_rate <<= 1

        if number_of_ones > number_of_zeros:
            gamma_rate |= 1
        else:
            epsilon_rate |= 1

    return gamma_rate * epsilon_rate

func calc_oxygen_generator_rating(report: [string]) -> i64:
    for index in range(report[0].length()):
        number_of_ones, number_of_zeros = count_ones_and_zeros_at_index(report,
                                                                        index)

        if number_of_ones >= number_of_zeros:
            report = [value for value in report if value[index] == '1']
        else:
            report = [value for value in report if value[index] == '0']

        if report.length() == 1:
            return i64(report[0], 2)

    raise UnreachableError()

func calc_co2_scrubber_rating(report: [string]) -> i64:
    for index in range(report[0].length()):
        number_of_ones, number_of_zeros = count_ones_and_zeros_at_index(report,
                                                                        index)

        if number_of_zeros <= number_of_ones:
            report = [value for value in report if value[index] == '0']
        else:
            report = [value for value in report if value[index] == '1']

        if report.length() == 1:
            return i64(report[0], 2)

    raise UnreachableError()

func part_2(filename: string) -> i64:
    report = get_input(filename)

    return calc_oxygen_generator_rating(report) * calc_co2_scrubber_rating(report)

func day_03():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

test all():
    assert part_1("example.txt") == 198
    assert part_2("example.txt") == 230
    assert part_1("input.txt") == 3923414
    assert part_2("input.txt") == 5852595
