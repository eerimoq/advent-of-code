from os import TextFile

def has_bingo(marks: [bool]) -> bool:
    for i in range(5):
        if (marks[5 * i]
            and marks[5 * i + 1]
            and marks[5 * i + 2]
            and marks[5 * i + 3]
            and marks[5 * i + 4]):
            return True

        if (marks[i]
            and marks[5 + i]
            and marks[10 + i]
            and marks[15 + i]
            and marks[20 + i]):
            return True

    return False

def calc_unmarked_numbers(board: [i64], marks: [bool]) -> i64:
    unmarked_numbers_sum = 0

    for number, mark in zip(board, marks):
        if not mark:
            unmarked_numbers_sum += number

    return unmarked_numbers_sum

def mark_number(board: [i64], marks: [bool], number: i64):
    for index in range(25):
        if board[index] == number:
            marks[index] = True
            break

def part_1(numbers: [i64], boards: [[i64]]) -> i64:
    marks = [[False for _ in range(25)] for _ in boards]

    for number in numbers:
        for board, mark in zip(boards, marks):
            mark_number(board, mark, number)

            if has_bingo(mark):
                return calc_unmarked_numbers(board, mark) * number

    raise NotImplementedError("No bingo")

def part_2(numbers: [i64], boards: [[i64]]) -> i64:
    boards_with_bingo: [i64] = []
    marks = [[False for _ in range(25)] for _ in boards]

    for number in numbers:
        for i, (board, mark) in enumerate(zip(boards, marks)):
            if i in boards_with_bingo:
                continue

            mark_number(board, mark, number)

            if has_bingo(mark):
                boards_with_bingo.append(i)

                if len(boards_with_bingo) == len(boards):
                    return calc_unmarked_numbers(board, mark) * number

    raise NotImplementedError("No bingo")

def day_04():
    lines = TextFile(f"{__assets__}/day_04.txt").read().strip().split("\n")
    numbers = [i64(number) for number in lines[0].split(',')]
    boards: [[i64]] = []

    for index in range(2, i64(len(lines)), 6):
        board: [i64] = []

        for row_index in range(5):
            board.extend([
                i64(number)
                for number in lines[index + row_index].strip().split(re"\s+")
            ])

        boards.append(board)

    print(part_1(numbers, boards))
    print(part_2(numbers, boards))

@test
def test_all():
    numbers = [
        7, 4, 9, 5, 11, 17, 23, 2, 0, 14,
        21, 24, 10, 16, 13, 6, 15, 25, 12, 22,
        18, 20, 8, 19, 3, 26, 1
    ]
    boards = [
        [
            22, 13, 17, 11, 0,
            8, 2, 23, 4, 24,
            21, 9, 14, 16, 7,
            6, 10, 3, 18, 5,
            1, 12, 20, 15, 19
        ],
        [
            3, 15 , 0 , 2, 22,
            9, 18, 13, 17, 5,
            19, 8, 7, 25, 23,
            20, 11, 10, 24, 4,
            14, 21, 16, 12, 6
        ],
        [
            14, 21, 17, 24, 4,
            10, 16, 15, 9, 19,
            18, 8, 23, 26, 20,
            22, 11, 13, 6, 5,
            2, 0, 12, 3, 7
        ]
    ]
    assert part_1(numbers, boards) == 4512
    assert part_2(numbers, boards) == 1924
