from os import TextFile

class Point:
    x: i64
    y: i64

def get_input(filename: string) -> ({Point}, [(string, i64)]):
    coordinates: {Point} = {}
    folds: [(string, i64)] = []

    for line in TextFile(f"{__assets__}/day_13/{filename}").read().split('\n'):
        mr = line.match(re"(\d+),(\d+)")

        if mr is not None:
            coordinates.add(Point(i64(mr.group(1)), i64(mr.group(2))))

        mr = line.match(re".*(.)=(\d+)")

        if mr is not None:
            folds.append((mr.group(1), i64(mr.group(2))))

    return (coordinates, folds)

def fold(coordinates: {Point}, direction: string, offset: i64) -> {Point}:
    new_coordinates: {Point} = {}

    for coordinate in coordinates:
        match direction:
            case "x":
                delta = coordinate.x - offset

                if delta > 0:
                    coordinate.x = (offset - delta)
            case "y":
                delta = coordinate.y - offset

                if delta > 0:
                    coordinate.y = (offset - delta)

        new_coordinates.add(coordinate)

    return new_coordinates

def part_1(filename: string) -> i64:
    coordinates, folds = get_input(filename)

    return i64(len(fold(coordinates, folds[0][0], folds[0][1])))

def part_2(filename: string) -> string:
    coordinates, folds = get_input(filename)

    for direction, offset in folds:
        coordinates = fold(coordinates, direction, offset)

    marks: [[string]] = []

    for _ in range(20):
        marks.append([" " for _ in range(80)])

    for coordinate in coordinates:
        marks[coordinate.y][coordinate.x] = "#"

    code = ""

    for row in marks:
        code += "".join(row).strip() + "\n"

    return code.strip()

def day_13():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

@test
def test_all():
    assert part_1("example.txt") == 17
    assert part_2("example.txt") == ("#####\n"
                                     "#   #\n"
                                     "#   #\n"
                                     "#   #\n"
                                     "#####")
    assert part_1("input.txt") == 706
    assert part_2("input.txt") == (
        "#    ###  ####   ## ###    ## #### #  #\n"
        "#    #  # #       # #  #    # #    #  #\n"
        "#    #  # ###     # ###     # ###  ####\n"
        "#    ###  #       # #  #    # #    #  #\n"
        "#    # #  #    #  # #  # #  # #    #  #\n"
        "#### #  # #     ##  ###   ##  #### #  #")
