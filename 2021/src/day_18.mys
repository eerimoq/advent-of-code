from os import TextFile

RE_EXPLODE: regex = re"^\[(\d+),(\d+)\]"
RE_EXPLODE_NEXT: regex = re"^[\[\],]*(\d+)"
RE_EXPLODE_PREV: regex = re"(\d+)[\[\],]*$"
RE_SPLIT: regex = re"^(\d+)"
RE_MAGNITUDE: regex = re"\[(\d+),(\d+)\]"

def get_input(filename: string) -> [string]:
    return TextFile(f"{__assets__}/day_18/{filename}").read().strip().split("\n")

def find_explode_index(number: string) -> i64:
    count = 0

    for index, ch in enumerate(number):
        match ch:
            case '[':
                count += 1
            case ']':
                count -= 1

        if count == 5:
            return index

    return -1

def find_split_index(number: string) -> i64:
    for index in range(i64(len(number) - 1)):
        if number[index + 1] in "1234567890":
            if number[index] in "1234567890":
                return index

    return -1

def explode(number: string, index: i64) -> string:
    mo = number[index:].match(RE_EXPLODE)
    left_regular_number = i64(mo.group(1))
    right_regular_number = i64(mo.group(2))
    before = number[0:index + mo.start(0)]
    after = number[index + mo.end(0):]
    number = f"{before}0{after}"

    # Next regular_number.
    mo = number[index + 1:].match(RE_EXPLODE_NEXT)

    if mo is not None:
        regular_number = i64(mo.group(1)) + right_regular_number
        before = number[0:index + 1 + mo.start(1)]
        after = number[index + 1 + mo.end(1):]
        number = f"{before}{regular_number}{after}"

    # Prev regular number.
    mo = number[0:index].match(RE_EXPLODE_PREV)

    if mo is not None:
        regular_number = i64(mo.group(1)) + left_regular_number
        before = number[0:mo.start(1)]
        after = number[mo.end(1):]
        number = f"{before}{regular_number}{after}"

    return number

def split(number: string, index: i64) -> string:
    mo = number[index:].match(RE_SPLIT)
    regular_number = i64(mo.group(1))
    left_regular_number = regular_number / 2
    right_regular_number = (regular_number + 1) / 2
    before = number[0:index]
    after = number[index + mo.end(1):]
    number = f"[{left_regular_number},{right_regular_number}]"

    return f"{before}{number}{after}"

def reduce(number: string) -> string:
    while True:
        index = find_explode_index(number)

        if index != -1:
            number = explode(number, index)
            continue

        index = find_split_index(number)

        if index != -1:
            number = split(number, index)
            continue

        break

    return number

def add(number_1: string, number_2: string) -> string:
    return reduce(f"[{number_1},{number_2}]")

def magnitude(number: string) -> i64:
    m = 0

    while True:
        mo = number.match(RE_MAGNITUDE)
        m = 3 * i64(mo.group(1)) + 2 * i64(mo.group(2))

        if len(mo.group(0)) == len(number):
            break

        number = f"{number[0:mo.start(0)]}{m}{number[mo.end(0):]}"

    return m

def part_1(filename: string) -> i64:
    lines = get_input(filename)
    number = lines[0]

    for line in slice(lines, 1, i64(len(lines))):
        number = add(number, line)

    return magnitude(number)

def part_2(filename: string) -> i64:
    lines = get_input(filename)
    maximum_magnitude = 0

    for i in range(i64(len(lines))):
        for j in range(i64(len(lines))):
            if i == j:
                continue

            maximum_magnitude = max(maximum_magnitude,
                                    magnitude(add(lines[i], lines[j])))

    return maximum_magnitude

def day_18():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

@test
def test_all():
    assert part_1("example.txt") == 143
    assert part_1("example_2.txt") == 1384
    assert part_1("example_3.txt") == 3488
    assert part_1("example_4.txt") == 4140
    assert part_1("input.txt") == 4391
    assert part_2("input.txt") == 4626
