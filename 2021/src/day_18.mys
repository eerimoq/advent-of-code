from os import TextFile

def get_input(filename: string) -> [string]:
    lines: [string] = []

    for line in TextFile(f"{__assets__}/day_18/{filename}").read().strip().split("\n"):
        mo = line.match(re"^(.*)$")

        if mo is not None:
            lines.append(mo.group(1))

    return lines

def find_explode_index(v: string) -> i64:
    count = 0

    for index, ch in enumerate(v):
        match ch:
            case '[':
                count += 1
            case ']':
                count -= 1

        if count == 5:
            return index

    return -1

def find_split_index(v: string) -> i64:
    for index in range(i64(len(v) - 1)):
        if v[index] in "1234567890":
            if v[index + 1] in "1234567890":
                return index

    return -1

def explode(v: string, index: i64) -> string:
    mo = v[index:].match(re"^\[(\d+),(\d+)\]")
    left_number = i64(mo.group(1))
    right_number = i64(mo.group(2))
    v = f"{v[0:index + mo.start(0)]}0{v[index + mo.end(0):]}"
    mo = v[index + 1:].match(re"^[\[\],]*(\d+)")

    if mo is not None:
        number = i64(mo.group(1)) + right_number
        v = f"{v[0:index + 1 + mo.start(1)]}{number}{v[index + 1 + mo.end(1):]}"

    mo = v[0:index].match(re"(\d+)[\[\],]*$")

    if mo is not None:
        number = i64(mo.group(1)) + left_number
        v = f"{v[0:mo.start(1)]}{number}{v[mo.end(1):]}"

    return v

def split(v: string, index: i64) -> string:
    mo = v[index:].match(re"^(\d+)")
    number = i64(mo.group(1))
    left_number = number / 2
    right_number = (number + 1) / 2

    return f"{v[0:index]}[{left_number},{right_number}]{v[index + mo.end(1):]}"

def reduce(v: string) -> string:
    while True:
        index = find_explode_index(v)

        if index != -1:
            v = explode(v, index)
            continue

        index = find_split_index(v)

        if index != -1:
            v = split(v, index)
            continue

        break

    return v

def add(v1: string, v2: string) -> string:
    return reduce(f"[{v1},{v2}]")

def magnitude(v: string) -> i64:
    m = 0

    while True:
        mo = v.match(re"\[(\d+),(\d+)\]")
        m = 3 * i64(mo.group(1)) + 2 * i64(mo.group(2))

        if len(mo.group(0)) == len(v):
            break

        v = f"{v[0:mo.start(0)]}{m}{v[mo.end(0):]}"

    return m

def part_1(filename: string) -> i64:
    lines = get_input(filename)
    number = lines[0]

    for line in slice(lines, 1, i64(len(lines))):
        number = add(number, line)

    return magnitude(number)

def part_2(filename: string) -> i64:
    lines = get_input(filename)
    maximum_magnitude = 0

    for i in range(i64(len(lines))):
        for j in range(i64(len(lines))):
            if i == j:
                continue

            maximum_magnitude = max(maximum_magnitude,
                                    magnitude(add(lines[i], lines[j])))

    return maximum_magnitude

def day_18():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

@test
def test_all():
    assert part_1("example.txt") == 143
    assert part_1("example_2.txt") == 1384
    assert part_1("example_3.txt") == 3488
    assert part_1("example_4.txt") == 4140
    assert part_1("input.txt") == 4391
    assert part_2("input.txt") == 4626
