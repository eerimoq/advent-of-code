from os.path import Path

func get_input(filename: string) -> [[i64]]:
    items = []

    for line in Path(f"{__assets__}/day_11/{filename}").read_text().strip().split("\n"):
        digits = []

        for ch in line:
            digits.append(i64(string(ch)))

        items.append(digits)

    return items

class Matrix:
    data: [[i64]]
    height: i64
    width: i64

    func __init__(self, data: [[i64]]):
        self.data = data
        self.height = data.length()
        self.width = data[0].length()

    func get(self, r: i64, c: i64) -> i64:
        return self.data[r][c]

    func set(self, r: i64, c: i64, v: i64):
        self.data[r][c] = v

    func neighbours(self, r: i64, c: i64) -> [(i64, i64)]:
        neighbours = []

        for nr in range(r - 1, r + 2):
            for nc in range(c - 1, c + 2):
                if nr == r and nc == c:
                    continue

                if nr >= 0 and nr < self.height and nc >= 0 and nc < self.width:
                    neighbours.append((nr, nc))

        return neighbours

func update(energies: Matrix) -> i64:
    flashes = 0
    to_visit: [(i64, i64)] = []

    for r in range(energies.height):
        for c in range(energies.width):
            to_visit.append((r, c))

    while to_visit.length() > 0:
        r, c = to_visit.pop()
        energy = energies.get(r, c)

        if energy < 10:
            energies.set(r, c, energy + 1)

            if energy == 9:
                flashes += 1
                to_visit.extend(energies.neighbours(r, c))

    for r in range(energies.height):
        for c in range(energies.width):
            if energies.get(r, c) == 10:
                energies.set(r, c, 0)

    return flashes

func part_1(filename: string) -> i64:
    energies = Matrix(get_input(filename))
    flashes = 0

    for _ in range(100):
        flashes += update(energies)

    return flashes

func part_2(filename: string) -> i64:
    energies = Matrix(get_input(filename))

    for step in range(1000):
        flashes = update(energies)

        if flashes == 100:
            return step + 1

    raise UnreachableError("Never.")

func day_11():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

test all():
    assert part_1("example.txt") == 1656
    assert part_1("input.txt") == 1562
    assert part_2("input.txt") == 268
