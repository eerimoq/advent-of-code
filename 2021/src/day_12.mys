from os import TextFile

def get_input(filename: string) -> [(string, string)]:
    items: [(string, string)] = []

    for line in TextFile(f"{__assets__}/day_12/{filename}").read().strip().split("\n"):
        parts = line.split('-')
        items.append((parts[0], parts[1]))

    return items

def find_adjecent_caves(lines: [(string, string)]) -> {string: [string]}:
    adjecent_caves: {string: [string]} = {}

    for begin, end in lines:
        if begin not in adjecent_caves:
            adjecent_caves[begin] = []

        adjecent_caves[begin].append(end)

        if end not in adjecent_caves:
            adjecent_caves[end] = []

        adjecent_caves[end].append(begin)

    return adjecent_caves

def part_1(filename: string) -> i64:
    lines = get_input(filename)
    adjecent_caves = find_adjecent_caves(lines)
    number_of_paths = 0
    paths = [["start"]]

    while len(paths) > 0:
        path = paths.pop()

        for adjecent_cave in adjecent_caves[path[-1]]:
            if adjecent_cave == "end":
                number_of_paths += 1
            elif adjecent_cave.is_upper() or adjecent_cave not in path:
                paths.append(path + [adjecent_cave])

    return number_of_paths

def part_2(filename: string) -> i64:
    lines = get_input(filename)
    adjecent_caves = find_adjecent_caves(lines)
    number_of_paths = 0
    paths = [(["start"], False)]

    while len(paths) > 0:
        path, twice = paths.pop()

        for adjecent_cave in adjecent_caves[path[-1]]:
            if adjecent_cave == "end":
                number_of_paths += 1
            else:
                if adjecent_cave.is_lower() and adjecent_cave in path:
                    if not twice and adjecent_cave != "start":
                        paths.append((path + [adjecent_cave], True))
                else:
                    paths.append((path + [adjecent_cave], twice))

    return number_of_paths

def day_12():
    print(part_1("input.txt"))
    print(part_2("input.txt"))

@test
def test_all():
    assert part_1("example.txt") == 10
    assert part_2("example.txt") == 36
    assert part_1("input.txt") == 3000
    assert part_2("input.txt") == 74222
